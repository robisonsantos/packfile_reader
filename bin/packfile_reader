#!/usr/bin/env ruby

require 'optimist'
require 'packfile_reader'

opts = Optimist::options do
  version "v0.0.1 (c) 2020 Robison WR Santos"
  banner <<~EOS
    This tool is used to parse and extract data from git packfiles without a .idx file.
    By default, the script will only report the object ids, their type and their deflated sizes.
    You can also make the script expand the content of the objects in the local directory or a directory
    of your choice.

    Usage:
      packfile_reader [options] <packfile>
    where [options] are:
  EOS

  opt :headers_only, 'Display only the headers of the packfile'
  opt :no_headers, 'Skip displaying the headers of the packfile'
  opt :filter_by_ids, 'Comma separated list of object ids to look for', :default => 'any', :short => '-i', :type => String
  opt :expand_objects, 'Whether to expand objects data', :default => false, :short => '-e'
  opt :output_dir, 'Directory to store the expanded objects', :default => '.', :short => '-o', :type => String
  opt :verbose, 'Log some debugging informaiton to stderr', :default => false, :short => '-v'
end

(puts "You must inform a single packfile, found #{ARGV.size}"; exit 1) if ARGV.size > 1 or ARGV.empty?

packfile = ARGV.first
(puts 'Packfile not found'; exit 2) unless File.exist?(packfile)

File.open(packfile, 'rb') do |f|
  begin
    header = PackfileReader::PackfileHeader.new(f)
  rescue RuntimeError => e
    $stderr.puts e.messase
    exit 3
  end

  unless opts[:no_headers]
    puts header
    puts
  end

  exit(0) if opts[:headers_only]

  ids_to_filter = opts[:filter_by_ids]
  ids_to_filter = 'any' if ids_to_filter.empty?

  objects_to_find = ids_to_filter == 'any' ? :any : ids_to_filter.split(',').map(&:strip)
  entries_processed = 0
  limit = objects_to_find == :any ? header.n_entries : objects_to_find.size
  (0...limit).each do
    entry = PackfileReader::PackfileEntry.next_entry(f, objects_to_find, opts[:verbose]) do |c,u,id|
      if opts[:expand_objects]
        dir = opts[:output_dir]
        File.open(File.join(dir, "#{id}.txt"), 'w') {|o| o.write u}
      end
    end

    timestamp = opts[:verbose] ? "[#{Time.now}] " : ''
    puts "\u001b[0K#{timestamp}#{entry.id}\t#{entry.type}\t#{entry.size}"
  end
end
